---
output-file: index.html
title: "Patient movements in the Victorian hospital system: does time matter?"
date: 2025-02-03
author:
  - name: David Wu
    corresponding: true
    email: david.wu1@monash.edu 
institute: "Department of Econometrics and Business Statistics, Monash University"
footer: "ANZIAM 2025"
format:
  presentation-revealjs:
    css: styles.css
title-slide-attributes: 
  data-background-image: img/bg-10-clean.png
---

```{python}
from pathlib import Path
import numpy as np
import polars as pl
import seaborn as sns
from matplotlib import pyplot as plt, colors
import h5py

basepath = Path.home() / "REPOS" / "echidna_network"
# sns.set()
sns.set_context("poster")
sns.set_style("ticks")
sns.set_palette("colorblind")

%config InlineBackend.figure_formats = ['svg']
```

## Co-Authors
  - Tjibbe Donker, [Universit√§tsklinikum Freiburg]{style="color:grey;font-size:x-large" } 
  - Nic Geard, [University of Melbourne]{style="color:grey;font-size:x-large"} 
  - Andrew Stewardson, [Alfred Health]{style="color:grey;font-size:x-large"} 
  - Claire Gorrie, [Microbiological Diagnostic Unit Public Health Laboratory]{style="color:grey;font-size:x-large"} 
  - Ben Howden, [Microbiological Diagnostic Unit Public Health Laboratory]{style="color:grey;font-size:x-large"} 
  - Anton Peleg, [Alfred Health]{style="color:grey;font-size:x-large"} 
  - Yen Thon Teoh, [Victorian Department of Health]{style="color:grey;font-size:x-large"} 
  - Andrew Wilson, [SaferCare Victoria]{style="color:grey;font-size:x-large"} 
  - Ben Cooper, [University of Oxford]{style="color:grey;font-size:x-large"} 
  - Michael Lydeamore, [Monash University]{style="color:grey;font-size:x-large"} 


## Background

:::{.incremental}
- Carbapenemase-producing Enterobacterales (CPE) is a type of bacteria that live in the intestine, and is generally asymptomatic, but can cause a range of severe symptoms.
- More importantly, it is resistant to carbapenems, a class of "last-line-of-defense" antibiotic.
- Variants of CPE have been detected in ICUs in Victorian hospitals, including a strain exclusive to Victoria.
- Patients that are asymptomatically infected (colonised) can spread CPE and other antimicrobial-resistant infections between hospitals.
:::

:::{.fragment}
![Incidence of CPE in Victoria [@vichealth_cpe]](img/cpe_power_bi_again.png){#fig-cpe-counts height=400}
:::
<!-- ## {.standout .monash-bg-blue .center} -->
<!-- Movement of Individuals -->

## ECHIDNA

### Objectives

- Develop a surveillance tool for anti-microbial resistant (AMR) organisms
- Evaluate ways of controlling the spread of AMR

### Data

- Timestamped data of when patients are admitted to and discharged from a hospital.
- Spans about 10 years from the beginning of 2011 to the end of 2019.
- Selectively-rich administrative data.

| e_LinkedPersonId | CAMPUS | AdmissionDateTime | SeparationDatetime | ... |
|:----|:----|:----|:----|:----|
| jdoe21 | Alfred, The | 2032-02-30T16:20:00Z | 2032-05-04T11:59:59Z | |

: Relevant fields from the Victorian Admitted Episodes Database (VAED) {#tbl-vaed-fields}

## Modelling the spread of AMR 

1.  [Individual infection dynamics]{.fragment .semi-fade-out fragment-index=1}

2.  [Within-hospital infection dynamics]{.fragment .semi-fade-out fragment-index=1}

3.  Between-hospital movement 

## Characterising Movement
### Existing Approaches

Treat hospitals as nodes of a static network, use a continuous-time Markov chain to model 

::: {layout-ncol=2 layout-valign="bottom"}
![from @donker_dispersal_2014](img/donker_2014.jpg){height=600}

![from @nekkab_spread_2017](img/nekkab_2014.png){height=600}
:::

## Characterising Movement
### Existing Approaches

Treat hospitals as nodes of a static network, use a continuous-time Markov chain to model 

Some flaws:

::: {.incremental}
- Patients tend to leave hospital, and then return.
  
- Movements tend to change over time (both drift and seasonally).
:::

## Characterising Movement 

Patients tend to leave hospital, and sometimes return.

```{python}
#| label: fig-interadmission-time
#| fig-cap: Distribution of time between subsequent admissions (discharge to next admission)

readmit_df = pl.read_parquet(basepath / "concordant_networks/readmission_time.parquet")

fig, ax = plt.subplots(figsize=(16, 8))
sns.despine(ax=ax)

sns.scatterplot(readmit_df, x="readmission_time", y="count", ax=ax,)
ax.set_xlabel("Inter-admission time (days)")
ax.set_xscale('asinh')
ax.set_xlim(-1e-1, None)
ax.set_xticks([0, 1.0, 10.0, 100.0])
ax.set_yscale('log')
```


## Characterising Movement {.smaller}

::: {#fig-movement-schematic height=500}
```{.tikz}
%%| filename: movement-schematic
\tikzset{every picture/.style={/utils/exec={\sffamily}}}
\begin{tikzpicture}[transform shape]
  \node[draw,circle] (A) at (0,0) {$x_i$};
  \node[draw,circle] (B) at (4,0) {$x_j$};
  \node[draw,rectangle] (C) at (2,-2) {$z_{ij}$};
  \node[draw,circle] (Z) at (1.5, 1) {$\emptyset$};
  \draw[->] (A) -- (C) node[midway,below left] {$\lambda_{ij}(t)$};
  \draw[->] (C) -- (B) node[midway,below right] {$\tau_{ij}(t)$};
  \draw[->] (A) -- (Z) node[midway,above left] {$\mu_{i}(t)$};
  \draw[->] (A) -- (B) node[midway,above] {$d_{ij}(t)$};
\end{tikzpicture}
```

Schematic of movement
:::

- $\mu_i(t)$: rate that patients leave hospital to never return
- $d_{ij}(t)$: rate of direct transfers from hospital $x_i$ to $x_j$
- $\lambda_{ij}$: rate of indirect transfers from hospital $x_i$ to hospital $x_j$
- $\tau_{ij}$: time spent at home $z_{ij}$ before readmitting at hospital $x_j$

## Models of Movement

The static network can be considered as a model where

- rate of indirect transfers is always zero
  - time spent at home is captured in a slower rate of transfer
- all (non-zero) rates are static over time

These do not agree with our observations of patient movement.

::: {.fragment .fade-in}
How can we improve this?
:::

## Models of Movement 

### Improved Static Network

We introduce indirect transfers: this separates _how many_ transfers occur from _how fast_ they occur.

This also gets colonised patients out of hospital.

![Improved static network model with indirect layer](img/bilayer_improved_static.png){#fig-improved-static}

## Models of Movement 

### Improved Static Network

We introduce indirect transfers: this separates _how many_ transfers occur from _how fast_ they occur.

This also gets colonised patients out of hospital.

```{python}
#| label: fig-adjusted-readmit-model
#| fig-cap: Model of readmission time for an improved static network model
fig, ax = plt.subplots(figsize=(16, 6))
sns.despine(ax=ax)

sns.scatterplot(readmit_df, x="readmission_time", y="count", ax=ax, label="data")
ax.set_xlabel("Inter-admission time (days)")
ax.set_xscale('asinh')
ax.set_xlim(-1e-1, None)
ax.set_xticks([0, 1.0, 10.0, 100.0])
ax.set_yscale('log')

total_size = readmit_df.select(pl.col('count').sum()).item()

direct_prop = (
  readmit_df.filter(pl.col('readmission_time') < 14).select(pl.col('count').sum()).item()
) / total_size

indirect_mean = (
  readmit_df
  .with_columns(weight = pl.col('readmission_time') * pl.col('count'))
  .filter(pl.col('readmission_time').ge(14))
  .sum()
  .select(pl.col('weight') / pl.col('count'))
  .item()
)

xs = np.linspace(
  0, readmit_df.select(pl.col('readmission_time').max()).item(),
  1001
)
ax.plot([0, 0], [0, direct_prop * total_size], color='orange', label="spike-and-slab approximation")
ax.plot(xs, (1-direct_prop)*total_size/indirect_mean * np.exp(-xs / indirect_mean), color='orange')

ax.legend()
```

## Models of Movement

### Series of Static Networks

Instead of using a single static network, we can change the edges of the network over time.

:::: {#fig-snapshots }

```{.tikz}
%%| filename: snapshot-schematic
\tikzset{every picture/.style={/utils/exec={\sffamily}}}
\begin{tikzpicture}[scale=0.7, every node/.style={draw,circle,inner sep=2pt}]
    % First network
    \node (A1) at (0,1) {A};
    \node (B1) at (-1,-1) {B};
    \node (C1) at (1,-1) {C};
    \draw[->, bend right=30] (A1) to (B1);
    \draw[->, bend right=30] (B1) to (C1);
    \draw[->, bend right=30] (C1) to (A1);
    
    % Arrow to next network
    \draw[->,thick] (1.5,0) to (2.5,0);
    
    % Second network
    \node (A2) at (4,1) {A};
    \node (B2) at (3,-1) {B};
    \node (C2) at (5,-1) {C};
    \draw[->, bend right=30] (A2) to (B2);
    \draw[->, bend left=30] (A2) to (C2);
    
    % Arrow to next network
    \draw[->,thick] (5.5,0) to (6.5,0);
    
    % Third network
    \node (A3) at (8,1) {A};
    \node (B3) at (7,-1) {B};
    \node (C3) at (9,-1) {C};
    \draw[->, bend right=30] (B3) to (C3);
    \draw[->, bend left=30] (A3) to (C3);
\end{tikzpicture}
```

Schematic of a series of networks
::::

Here, the time between admissions is implicitly modelled by:

1. keeping patients that go home in a separate auxiliary state until the network changes
2. the movement of patients at home returning to hospital is modelled as a binomial rv.

## Models of Movement

### Temporally Explicit Model

We can also expand the state space to include time explicitly (albeit discretised).

::: {#fig-temporal-schematic}

```{.tikz}
%%| filename: temporal-schematic 
\tikzset{every picture/.style={/utils/exec={\sffamily}}}
\tikzset{lefty/.style args={#1}{->, bend left=#1}, lefty/.default=20}
\tikzset{righty/.style args={#1}{->, bend right=#1}, righty/.default=20}
\tikzset{faded/.style={->, line width=0.2pt, color=gray}}
\begin{tikzpicture}[every node/.style={draw,circle,inner sep=2pt}]
    % Grid of nodes
    \node (A1) at (0,3) {A1};
    \node (B1) at (0,2) {B1};
    \node (C1) at (0,1) {C1};
    \draw[lefty] (A1) to (B1);
    \draw[righty={35}] (A1) to (C1);
    
    \node (A2) at (1.5,3) {A2};
    \node (B2) at (1.5,2) {B2};
    \node (C2) at (1.5,1) {C2};
    \draw[righty] (B2) to (A2);
    \draw[lefty] (C2) to (B2);

    \draw[faded] (A1) to (A2);
    \draw[faded] (B1) to (B2);
    \draw[faded] (C1) to (C2);

    \draw[->] (B1) to (A2);
    
    \node (A3) at (3,3) {A3};
    \node (B3) at (3,2) {B3};
    \node (C3) at (3,1) {C3};
    \draw[righty] (A3) to (B3);
    \draw[lefty] (B3) to (C3);
    \draw[lefty] (C3) to (B3);

    \draw[faded] (A2) to (A3);
    \draw[faded] (B2) to (B3);
    \draw[faded] (C2) to (C3);

    \draw[->] (C2) to (A3);
    \draw[->] (B2) to (A3);
    \draw[->] (C1) to (B3);

    \node (A4) at (4.5,3) {A4};
    \node (B4) at (4.5,2) {B4};
    \node (C4) at (4.5,1) {C4};
    \draw[righty] (A4) to (B4);
    \draw[righty] (C4) to (B4);


    \draw[faded] (A3) to (A4);
    \draw[faded] (B3) to (B4);
    \draw[faded] (C3) to (C4);

    \draw[->] (B3) to (C4);
    \draw[->] (A3) to (B4);
    \draw[->] (A3) to (C4);
\end{tikzpicture}
```

Schematic of a temporal network
:::

## Models of Movement

So we have 4 models that have different levels of fidelity:

1. Na√Øve static network model
2. Improved static network model
   - include indirect transfers
3. Series of static networks model
   - time-varying rates
   - implicit duration of indirect transfer
4. Full temporal network model
   - time-varying rates
   - explicit duration of indirect transfer

## Simulation Results

Setting 30 "infected" individuals loose to move through the network, and note the first time that each hospital is visited by one of these individuals

```{python}
simulation_archives = {
    'temporal': basepath / 'zero_sims/temporal/sim_all_30s.h5',
    'improved static': basepath / 'zero_sims/static/sim_all_30s_fixed_axis.h5',
    'series': basepath / 'zero_sims/snapshot/sims_with_30seeds_pseudocap_fixed_axis.h5',
    'naive static': basepath / 'zero_sims/naive_static/sim_all_30s.h5',
}

metrics_archives = {
    'temporal': basepath / 'zero_sims/temporal/metrics_30s.parquet',
    'improved static': basepath / 'zero_sims/static/metrics_30s_fa.parquet',
    'series': basepath / 'zero_sims/snapshot/metrics_30s_fa.parquet',
    'naive static': basepath / 'zero_sims/naive_static/metrics_30s.parquet'
}

processed_results = {}

# metrics precomputed in compute_summary_stats.ipynb
for label, archive in metrics_archives.items():
        processed_results[label] = pl.read_parquet(archive)
```

We can measure the _extent_ of spread by counting the hospitals at least one individual has visited by some given day (here day 30).

```{python}
#| label: fig-extent-30
#| fig-cap: "Distribution of 30-day extent in different simulation models on different network types"
 
combined_all_df = pl.concat(
    [(df.select('seed', 'extent')
        .with_columns(
            pl.lit(label).alias('simulation'), 
            pl.col('extent').cast(pl.Int64)
        )
     ) for label, df in processed_results.items()
    ]
)

sim_type_order = ['temporal', 'series', 'improved static', 'naive static']
extent_bins = np.arange(0, combined_all_df.select('extent').max().item()+1)

fig, ax = plt.subplots(figsize=(13, 6))
sns.histplot(
    combined_all_df, 
    x = 'extent', 
    hue = 'simulation', 
    multiple = 'dodge', 
    bins = extent_bins, 
    hue_order = sim_type_order,
    discrete = True,
    ax = ax
)
sns.despine(ax=ax)
```

## Simulation Results 

We can also plot the empirical cumulative distribution of hitting times between pairs of hospitals across $N=20$ realisations, setting the probability of non-return to 0.

```{python}
hitting_time_columns = pl.selectors.starts_with('hitting_time_')

hitting_time_dists = dict()
for model, metrics in processed_results.items():
    hit_time_agg = metrics.select(hitting_time_columns).to_numpy().flatten()
    hitting_time_dists[model] = np.sort(hit_time_agg)
```

```{python}
#| label: fig-overall-hitting-comparison
#| fig-cap: Empirical distribution of hitting times
plt.figure(figsize=(14, 7.5))
for model, dist in hitting_time_dists.items():
    plt.plot(dist, np.linspace(0, 1, len(dist), endpoint=False), label=model)

plt.xlabel('hitting time')
plt.ylabel('ECDF')
sns.despine()
plt.legend(loc='lower right');
```

## Simulation Results 

We can also plot the empirical cumulative distribution of hitting times between pairs of hospitals across $N=20$ realisations, setting the probability of non-return to 0.

```{python}
#| label: fig-zoomed-hitting-comparison
#| fig-cap: Empirical distribution of hitting times (zoomed)
plt.figure(figsize=(14, 7.5))

for model, dist in hitting_time_dists.items():
    plt.plot(dist, np.linspace(0, 1, len(dist), endpoint=False), label=model)

plt.xlim(-10, 200)
plt.ylim(-0.01, 0.1)

plt.axvline(30, color='k', lw=0.7)

plt.xlabel('hitting time')
plt.ylabel('ECDF')
sns.despine()
plt.legend(loc='lower right');
```

## Moving Forward

### Verification of simulations
The expected hitting time is related to the survival function, which is characterised by the backward equations

  $$\begin{gathered}\mathbb{E}[h_{ij}] = \int_0^\infty \left(S_{ij}(t)\right)^N dt \\ \frac{d}{dt} S_{ij}(t) = Q_i S_{ij}(t)\end{gathered}$$

This should be tractable for the na√Øve static network, and plausibly computable for the improved static network.

However, the integral is annoying to numerically compute. [‚§∑](#sec-gl-scaling)

### Infection dynamics and control

The primary objective of the ECHIDNA project is surveillance and control.

The movement simulations already implement infection dynamics, which are turned off.


## Thanks

::::: {.columns}

:::: {.column width="60%"}
### Co-Authors
  - Tjibbe Donker, [Universit√§tsklinikum Freiburg]{style="color:grey;font-size:x-large" } 
  - Nic Geard, [University of Melbourne]{style="color:grey;font-size:x-large"} 
  - Andrew Stewardson, [Alfred Health]{style="color:grey;font-size:x-large"} 
  - Claire Gorrie, [Microbiological Diagnostic Unit Public Health Laboratory]{style="color:grey;font-size:x-large"} 
  - Ben Howden, [Microbiological Diagnostic Unit Public Health Laboratory]{style="color:grey;font-size:x-large"} 
  - Anton Peleg, [Alfred Health]{style="color:grey;font-size:x-large"} 
  - Yen Thon Teoh, [Victorian Department of Health]{style="color:grey;font-size:x-large"} 
  - Andrew Wilson, [SaferCare Victoria]{style="color:grey;font-size:x-large"} 
  - Ben Cooper, [University of Oxford]{style="color:grey;font-size:x-large"} 
  - Michael Lydeamore, [Monash University]{style="color:grey;font-size:x-large"} 


::::

:::: {.column width="40%"}

### Funding

NHMRC GNT 1156742


::: {.absolute bottom=30}
<hr />

Slides at [dwu0042.github.io/anziam25](https://dwu0042.github.io/anziam25)

Github: [dwu0042](https://github.com/dwu0042)

Bluesky: [\@davidjxwu.bsky.social](https://bsky.app/profile/davidjxwu.bsky.social)

:::

::::
:::::

## References 

::: {#refs}
:::

## Length of Stay

![Length of stay distribution across all hospitals](img/los_ss.png){#fig-los-ss height=700}

## Gauss-Laguerre and Scaling {#sec-gl-scaling .scrollable}

We can approximate the integral

$$ \int_0^\infty e^{-t} f(t) dt \approx \sum_{i=1}^{M} w_i f(x_i) $$

where $w_i$, $x_i$ are related to the roots of the Laguerre polynomials.

The problem is that the convergence of this numerical scheme depends on how $f(t)$ behaves.
In our case, $f(t) = e^t \left(\sum_k c_k e^{-\lambda_k t}\right)^N$.
As $\lambda$ decreases, the "tail" of the integral becomes more important, and is not captured as well.

We can counteract this by linearly scaling time $t$.

```{python}
#| label: fig-scaling-laggauss
#| fig-cap: Effect of scaling time for Gauss-Laguerre quadrature
def expl(xs, l=-1, c=1):
    return c * np.exp(l * xs)

def expl_scaled(xs, l=-1, c=1, s=1):
    return expl(s * xs, l=l, c=c)

def fexpls(l=-1, c=1, s=1):
    def expls(xs):
        return expl_scaled(xs, l=l, c=c, s=s)
    return expls

def laggauss_integrate(fun, prec=30):
    xs, ws = np.polynomial.laguerre.laggauss(prec)
    return np.dot(ws, fun(xs) * np.exp(xs))

ss = np.logspace(0, 6, num=71, base=10.0)

plt.figure(figsize=(13, 6))
plt.semilogx(ss,
             [s * laggauss_integrate(
                 fexpls(l=-0.005, c=1, s=s),
                 prec=30)
              for s in ss],
             'o-',
             label=r'$s\int_o^\infty e^{-\lambda st}$'
            )
plt.semilogx(ss,
             [s * laggauss_integrate(
                 fexpls(l=-0.0005, c=0.1, s=s),
                 prec=30)
              for s in ss],
             'o-',
             label=r'$s\int_o^\infty 0.1 e^{-0.1\lambda st}$'
            )

plt.xlabel('Scaling factor $s$') 
plt.ylabel('Recovered Integral')
plt.legend()
sns.despine()
```
